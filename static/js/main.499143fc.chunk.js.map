{"version":3,"sources":["Chart/Chart.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Chart","className","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","name","percent","weight","volume","map","row","key","scope","TextField","id","type","label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VAmBO,SAASA,IAgBZ,OACI,uBAAKC,UAAU,mBACX,gBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,gBAACC,EAAA,EAAD,CAAOJ,UAAU,SACb,gBAACK,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,mBACA,gBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,WACA,gBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,UACA,gBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,YAGR,gBAACC,EAAA,EAAD,KA3BH,CACT,CACIC,KAAM,QACNC,QAAS,IACTC,OAAQ,EACRC,OAAQ,GAEZ,CACIH,KAAM,QACNC,QAAS,GACTC,OAAQ,EACRC,OAAQ,IAiBWC,KAAI,SAAAC,GAAG,OACV,gBAACT,EAAA,EAAD,CAAUU,IAAKD,EAAIL,MACf,gBAACH,EAAA,EAAD,CAAWL,UAAU,KAAKe,MAAM,OAC3BF,EAAIL,MAET,gBAACH,EAAA,EAAD,CAAWC,MAAM,SACb,gBAACU,EAAA,EAAD,CAAWC,GAAG,eAAeC,KAAK,SAASC,MAAM,aAErD,gBAACd,EAAA,EAAD,CAAWC,MAAM,SAASO,EAAIH,QAC9B,gBAACL,EAAA,EAAD,CAAWC,MAAM,SAASO,EAAIF,gBC5C/CS,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCIcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.499143fc.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport './Chart.css';\r\n\r\nclass IngredientData {\r\n    name = '';\r\n    percent = 0;\r\n    weight = 0;\r\n    volume = 0;\r\n}\r\n\r\nexport function Chart() {\r\n    const rows = [\r\n        { \r\n            name: 'flour',\r\n            percent: 100,\r\n            weight: 1,\r\n            volume: 1,\r\n        } as IngredientData,\r\n        { \r\n            name: 'water',\r\n            percent: 20,\r\n            weight: 3,\r\n            volume: 3,\r\n        } as IngredientData,\r\n    ];\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <TableContainer component={Paper}>\r\n                <Table className=\"table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Ingredient</TableCell>\r\n                            <TableCell align=\"right\">Percent</TableCell>\r\n                            <TableCell align=\"right\">Weight</TableCell>\r\n                            <TableCell align=\"right\">Volume</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        { rows.map(row => (\r\n                            <TableRow key={row.name}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <TextField id=\"filled-basic\" type=\"number\" label=\"Percent\" />\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{row.weight}</TableCell>\r\n                                <TableCell align=\"right\">{row.volume}</TableCell>\r\n                            </TableRow>\r\n                        )) }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}","import React from 'react';\n\nimport './App.css';\nimport { Chart } from './Chart/Chart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}