{"version":3,"sources":["Chart/IngredientRow/IngredientRow.tsx","Chart/AddIngredient.tsx","Chart/Chart.tsx","App.tsx","serviceWorker.js","index.js"],"names":["IngredientRow","props","TableRow","TableCell","component","scope","ingredient","name","Button","color","onClick","onRemoved","align","TextField","id","type","inputProps","min","max","step","label","onChange","event","newPercent","target","value","onPercentChange","percent","newAmount","onAmountChange","amount","toFixed","AddIngredient","React","setName","setPercent","variant","onAdd","Chart","ingredients","setIngredients","percentChange","flourAmount","find","x","newIngredients","map","amountChange","ingredientRemoved","filter","className","newIngredient","concat","TableContainer","Paper","Table","TableHead","TableBody","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f8a5c81.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n// eslint-disable-next-line no-unused-vars\nimport {Ingredient} from '../Ingredient';\n\nexport const IngredientRow = (props: {\n  ingredient: Ingredient;\n  onPercentChange: any;\n  onAmountChange: any;\n  onRemoved: any;\n}): JSX.Element => {\n  const onPercentChange = (event: any) => {\n    const newPercent: number = event.target.value;\n    props.onPercentChange(props.ingredient.name, newPercent);\n  };\n\n  const onAmountChange = (event: any) => {\n    const newAmount: number = event.target.value;\n    props.onAmountChange(props.ingredient.name, newAmount);\n  };\n\n  const removeClicked = () => {\n    props.onRemoved(props.ingredient.name);\n  };\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {props.ingredient.name}\n        {props.ingredient.name !== 'flour' && \n        <Button\n          color=\"primary\"\n          onClick={removeClicked}>\n            remove\n        </Button>}\n      </TableCell>\n      <TableCell align=\"right\">\n        {props.ingredient.name === 'flour' ?\n          <p>100</p>:\n          <TextField\n            id=\"filled-basic\"\n            type=\"number\"\n            inputProps={{min: '1', max: '100', step: '1'}}\n            label=\"Percent\"\n            onChange={onPercentChange}\n            value={props.ingredient.percent}\n          />}\n      </TableCell>\n      <TableCell align=\"right\">\n        {props.ingredient.name === 'flour' ?\n          <TextField\n            id=\"filled-basic\"\n            type=\"number\"\n            inputProps={{min: '0', step: '0.5'}}\n            label=\"Amount\"\n            onChange={onAmountChange}\n            value={props.ingredient.amount}\n          />:\n          <p>{props.ingredient.amount.toFixed(2)}</p>\n        }\n      </TableCell>\n    </TableRow>\n  );\n};\n","import * as React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nexport const AddIngredient = (props: {onAdd: any}): JSX.Element => {\n  const [name, setName] = React.useState('');\n  const [percent, setPercent] = React.useState(0);\n\n  const nameChanged = (event: any) => {\n    setName(event.target.value);\n  };\n\n  const percentChanged = (event: any) => {\n    setPercent(event.target.value);\n  };\n\n  const addClicked = () => {\n    if (name && percent) {\n      setName('');\n      setPercent(0);\n      props.onAdd(name, percent);\n    }\n  };\n\n  return (\n    <div>\n      <h3>Add Ingredient</h3>\n      <TextField label=\"Name\" value={name} onChange={nameChanged} />\n      <TextField\n        label=\"Percent\"\n        type=\"number\"\n        value={percent}\n        onChange={percentChanged}\n      />\n      <Button variant=\"contained\" color=\"primary\" onClick={addClicked}>\n        Add\n      </Button>\n    </div>\n  );\n};\n","import * as React from 'react';\n\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport Paper from '@material-ui/core/Paper';\n\n// eslint-disable-next-line no-unused-vars\nimport {Ingredient} from './Ingredient';\nimport {IngredientRow} from './IngredientRow/IngredientRow';\nimport {AddIngredient} from './AddIngredient';\n\nexport const Chart = (): JSX.Element => {\n  const initialIngredients: Array<Ingredient> = [\n    {\n      name: 'flour',\n      percent: 100,\n      amount: 10,\n    },\n  ];\n\n  const [ingredients, setIngredients] = React.useState(initialIngredients);\n\n  const percentChange = (name: string, percent: number) => {\n    if (!percent || percent <= 0) {\n      return;\n    }\n\n    const flourAmount = ingredients.find((x) => x.name === 'flour')?.amount;\n\n    if (!flourAmount) {\n      return;\n    }\n\n    const newIngredients = ingredients.map((x) => {\n      if (x.name === name) {\n        const newAmount = (percent * flourAmount) / 100;\n\n        return {\n          name: name,\n          percent: percent,\n          amount: newAmount,\n        } as Ingredient;\n      }\n\n      return x;\n    });\n\n    setIngredients(newIngredients);\n  };\n\n  const amountChange = (name: string, amount: number) => {\n    if (!amount || amount <= 0) {\n      return;\n    }\n\n    const newIngredients = ingredients.map((x) => {\n      return {\n        name: x.name,\n        percent: x.percent,\n        amount: (x.percent * amount) / 100,\n      } as Ingredient;\n    });\n\n    setIngredients(newIngredients);\n  };\n\n  const ingredientAdded = (name: string, percent: number) => {\n    if (ingredients.find((x) => x.name === name)) {\n      return;\n    }\n\n    const flourAmount = ingredients.find((x) => x.name === 'flour')?.amount;\n\n    const newIngredient = {\n      name: name,\n      percent: percent,\n      amount: ((flourAmount || 0) * percent) / 100,\n    } as Ingredient;\n\n    const newIngredients = ingredients.concat([newIngredient]);\n\n    setIngredients(newIngredients);\n  };\n\n  const ingredientRemoved = (name: string) => {\n    const newIngredients = ingredients.filter((x) => x.name !== name);\n    setIngredients(newIngredients);\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <AddIngredient onAdd={ingredientAdded} />\n      <TableContainer component={Paper}>\n        <Table className=\"table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Ingredient</TableCell>\n              <TableCell align=\"right\">Percent (%)</TableCell>\n              <TableCell align=\"right\">Weight (grams)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {ingredients.map((ingredient: Ingredient) => (\n              <IngredientRow\n                key={ingredient.name}\n                ingredient={ingredient}\n                onPercentChange={percentChange}\n                onAmountChange={amountChange}\n                onRemoved={ingredientRemoved}\n              />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './App.css';\nimport {Chart} from './Chart/Chart';\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <h1>Baker&apos;s Percentages</h1>\n      <Chart />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}